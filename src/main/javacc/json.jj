options {
  /**
   * The default action is to generate the parser file (MyParser.java in the above example).
   * When set to false, the parser file is not generated.
   * Typically, this option is set to false when you wish to generate only the token manager
   * and use it without the associated parser.
   *
   * @default true
   */
  BUILD_PARSER = true;
  /**
   * The default action is to generate the token manager file.
   * When set to false the token manager file is not generated.
   * The only reason to set this option to false is to save some time during parser generation
   * when you fix problems in the parser part of the grammar file
   * and leave the lexical specifications untouched.
   *
   * @default true
   */
  BUILD_TOKEN_MANAGER = true;
  /**
   * Setting this option to true causes the generated parser to lookahead for extra tokens ahead of time.
   * This facilitates some performance improvements.
   * However, in this case (when the option is true), interactive applications may not work
   * since the parser needs to work synchronously with the availability of tokens from the input stream.
   * In such cases, it’s best to leave this option at its default value.
   *
   * @default false
   */
  CACHE_TOKENS = false;
  /**
   * This is the number of tokens considered in checking choices of the form A | B | ... for ambiguity.
   * For example, if there is a common two token prefix for both A and B, but no common three token prefix,
   * (assume this option is set to 3) then JavaCC can tell you to use a lookahead of 3 for disambiguation purposes.
   * And if A and B have a common three token prefix, then JavaCC only tell you that you need to have a lookahead of 3 or more.
   * Increasing this can give you more comprehensive ambiguity information at the cost of more processing time.
   * For large grammars such as the Java grammar, increasing this number any further causes the checking to take too much time.
   *
   * @default 2
   */
  CHOICE_AMBIGUITY_CHECK = 2;
  /**
   * When set to true, every call to the token manager’s method getNextToken() (see the description of the JavaCC API)
   * will cause a call to a used defined method CommonTokenAction after the token has been scanned in by the token manager.
   * The user must define this method within the TOKEN_MGR_DECLS section.
   * The signature of this method is void CommonTokenAction(Token t).
   *
   * @default false
   */
  COMMON_TOKEN_ACTION = false;
  /**
   * Setting this option to true causes the parser to generate all the tracing information it does
   * when the option DEBUG_PARSER is true, and in addition, also causes it to generate a trace of actions
   * performed during lookahead operation.
   *
   * @default false
   */
  DEBUG_LOOKAHEAD = false;
  /**
   * This option is used to obtain debugging information from the generated parser.
   * Setting this option to true causes the parser to generate a trace of its actions.
   * Tracing may be disabled by calling the method disable_tracing() in the generated parser class.
   * Tracing may be subsequently enabled by calling the method enable_tracing() in the generated parser class.
   *
   * @default false
   */
  DEBUG_PARSER = false;
  /**
   * This option is used to obtain debugging information from the generated token manager.
   * Setting this option to true causes the token manager to generate a trace of its actions.
   * This trace is rather large and should only be used when you have a lexical error
   * that has been reported to you and you cannot understand why.
   * Typically, in this situation, you can determine the problem by looking at the last few lines of this trace.
   *
   * @default false
   */
  DEBUG_TOKEN_MANAGER = false;
  /**
   * Setting it to false causes errors due to parse errors to be reported in somewhat less detail.
   * The only reason to set this option to false is to improve performance.
   *
   * @default true
   */
  ERROR_REPORTING = true;
  /**
   * This option setting controls lookahead ambiguity checking performed by JavaCC.
   * By default (when this option is false), lookahead ambiguity checking is performed for all choice points
   * where the default lookahead of 1 is used.
   * Lookahead ambiguity checking is not performed at choice points where there is an explicit lookahead specification,
   * or if the option LOOKAHEAD is set to something other than 1.
   * Setting this option to true performs lookahead ambiguity checking at all choice points
   * regardless of the lookahead specifications in the grammar file.
   *
   * @default false
   */
  FORCE_LA_CHECK = false;
  /**
   * Setting this option to true causes the generated token manager to ignore case in the token specifications
   * and the input files. This is useful for writing grammars for languages such as HTML.
   * It is also possible to localize the effect of IGNORE_CASE by using an alternate mechanism described later.
   *
   * @default false
   */
  IGNORE_CASE = false;
  /**
   * When set to true, the generated parser uses an input stream object that processes Java Unicode escapes (\\u...)
   * before sending characters to the token manager. By default, Java Unicode escapes are not processed.
   * This option is ignored if either of options USER_TOKEN_MANAGER, USER_CHAR_STREAM is set to true.
   *
   * @default false
   */
  JAVA_UNICODE_ESCAPE = true;
  /**
   * The number of tokens to look ahead before making a decision at a choice point during parsing.
   * The smaller this number, the faster the parser.
   * This number may be overridden for specific productions within the grammar as described later.
   * See the description of the lookahead algorithm for complete details on how lookahead works.
   *
   * @default 1
   */
  LOOKAHEAD = 1;
  /**
   * This is the number of tokens considered in checking all other kinds of choices
   * (i.e. of the forms (A)*”, (A)+, and (A)?) for ambiguity.
   * This takes more time to do than the choice checking, and hence the default value is set to 1 rather than 2.
   *
   * @default 1
   */
  OTHER_AMBIGUITY_CHECK = 1;
  /**
   * This controls where output files are generated.
   *
   * @default current directory
   */
  //OUTPUT_DIRECTORY = pwd;
  /**
   * JavaCC performs many syntactic and semantic checks on the grammar file during parser generation.
   * Some checks such as detection of left recursion, detection of ambiguity,
   * and bad usage of empty expansions may be suppressed for faster parser generation by setting this option to false.
   * Note that the presence of these errors (even if they are not detected and reported by setting this option to false)
   * can cause unexpected behavior from the generated parser.
   *
   * @default true
   */
  SANITY_CHECK = true;
  /**
   * If true, all methods and class variables are specified as static in the generated parser and token manager.
   * This allows only one parser object to be present, but it improves the performance of the parser.
   * To perform multiple parses during one run of your Java program, you will have to call the ReInit() method
   * to reinitialize your parser if it is static.
   * If the parser is non-static, you may use the new operator to construct as many parsers as you wish.
   * These can all be used simultaneously from different threads.
   *
   * @default true
   */
  STATIC = false;
  /**
   * The default action is to generate support classes (such as Token.java, ParseException.java etc) with public visibility.
   * If set to false, the classes will be generated with package private visibility.
   *
   * @default true
   */
  SUPPORT_CLASS_VISIBILITY_PUBLIC = true;
  /**
   * The default option means that the generated Token class will extend java.lang.Object.
   * This option may be set to the name of a class that will be used as the base class for the generated Token class.
   *
   * @default ""
   */
  TOKEN_EXTENDS = "";
  /**
   * The default option means that Tokens will be created by calling Token.newToken().
   * If set the option names a Token factory class containing a public static Token newToken(int ofKind, String image) method.
   *
   * @default ""
   */
  TOKEN_FACTORY = "";
  /**
   * When set to true, the generated token manager will include a field called parser that references
   * the instantiating parser instance (of type MyParser in the above example).
   * The main reason for having a parser in a token manager is using some of its logic in lexical actions.
   * This option has no effect if the STATIC option is set to true.
   *
   * @default false
   */
  TOKEN_MANAGER_USES_PARSER = false;
  /**
   * When set to true, the generated parser uses uses an input stream object that reads Unicode files.
   * By default, ASCII files are assumed.
   * This option is ignored if either of options USER_TOKEN_MANAGER, USER_CHAR_STREAM is set to true.
   *
   * @default false
   */
  UNICODE_INPUT = true;
  /**
   * The default action is to generate a character stream reader as specified by the options JAVA_UNICODE_ESCAPE and UNICODE_INPUT.
   * The generated token manager receives characters from this stream reader.
   * If this option is set to true, then the token manager is generated to read characters from any character stream reader of type CharStream.java.
   * This file is generated into the generated parser directory.
   * This option is ignored if USER_TOKEN_MANAGER is set to true.
   *
   * @default false
   */
  USER_CHAR_STREAM = false;
  /**
   * The default action is to generate a token manager that works on the specified grammar tokens.
   * If this option is set to true, then the parser is generated to accept tokens from any token manager of type
   * TokenManager - this interface is generated into the generated parser directory.
   *
   * @default false
   */
  USER_TOKEN_MANAGER = false;
}

PARSER_BEGIN(JsonParser)

package kjss.json;

import java.io.*;
import java.util.*;

public class JsonParser {

  /** JsonParser entry point. */
  public static void main(String... args) throws Exception {
    JsonParser parser = new JsonParser(System.in);
    parser.parse();
  }

  public JsonParser(String input) {
    this(new StringReader(input));
  }

  public Json.Value parse() throws ParseException {
    return value();
  }

}

PARSER_END(JsonParser)

SKIP : {
    < WHITESPACE: " " | "\t" >
 |  < EOL: "\n" | "\r\n" | "\r" >
}

TOKEN : {
    < COMMA: "," >
  | < COLON: ":" >
}

Json.Value value():
{
    Json.Value v = Json.NULL;
}
{
  (
    <EOF>
  | v = nullValue()
  | v = booleanValue()
  | v = stringValue()
  | v = numberValue()
  | v = arrayValue()
  | v = objectValue()
  )
  { return v; }
}

TOKEN : {
    < NULL: "null" >
}

Json.Null nullValue():
{}
{
    <NULL> { return Json.NULL; }
}

TOKEN : {
    < TRUE: "true" >
  | < FALSE: "false" >
}

Json.Boolean booleanValue():
{}
{
    <TRUE> { return Json.TRUE; }
  | <FALSE> { return Json.FALSE; }
}

TOKEN : {
    < #DOUBLE_QUOTE: "\"" >
  | < #STRING_BODY: (
        (~["\""])
      | ( "\\" <DOUBLE_QUOTE> )
      )+ >
  | < EMPTY_STRING: <DOUBLE_QUOTE> <DOUBLE_QUOTE> >
  | < NON_EMPTY_STRING: <DOUBLE_QUOTE> <STRING_BODY> <DOUBLE_QUOTE> >
}

Json.String stringValue():
{}
{
    <EMPTY_STRING> { return Json.String.of(""); }
  | <NON_EMPTY_STRING> { return Json.String.of(token.image.substring(1, token.image.length() - 1)); }
}

TOKEN : {
    < #DIGIT_ZERO: "0" >
  | < #DIGIT_NON_ZERO: ["1"-"9"] >
  | < #DIGIT: <DIGIT_ZERO> | <DIGIT_NON_ZERO> >
  | < #DIGIT_MINUS: "-" >
  | < #DIGIT_PLUS: "+" >
  | < #DIGIT_DECIMAL: "." >
  | < #DIGIT_EXPONENT: ["e", "E"] >
  | < #INTEGER: <DIGIT_NON_ZERO> ( <DIGIT> )* >
  | < INTEGER_NUMBER: ( <DIGIT_MINUS> )? <INTEGER> >
  | < DECIMAL_NUMBER: ( <DIGIT_MINUS> )? <INTEGER> <DIGIT_DECIMAL> <INTEGER> ( <DIGIT_EXPONENT> ( <DIGIT_PLUS> | <DIGIT_MINUS> )? <INTEGER_NUMBER> )? >
}

Json.Number numberValue():
{}
{
    <INTEGER_NUMBER> { return Json.Number.of(Long.valueOf(token.image)); }
  | <DECIMAL_NUMBER> { return Json.Number.of(Double.valueOf(token.image)); }
}

TOKEN : {
    < LBRACKET: "[" >
  | < RBRACKET: "]" >
}

Json.Array arrayValue():
{
    Json.Value value;
    List<Json.Value> values = new ArrayList<>();
}
{
    <LBRACKET>
    (
    value = value() { values.add(value); value = null; }
        (
            <COMMA>
            value = value() { values.add(value); value = null; }
        )*
    )*
    <RBRACKET>
    { return Json.Array.of(values); }
}

TOKEN : {
    < LBRACE: "{" >
  | < RBRACE: "}" >

}

Json.Object objectValue():
{
    List<Json.Object.Member> members = List.of();
}
{
    <LBRACE> ( members = members() )? <RBRACE>
    { return Json.Object.of(members); }
}

List<Json.Object.Member> members():
{
    List<Json.Object.Member> members = List.of();
    Json.Object.Member member;
}
{
    member = member() [ <COMMA> members = members() ]
    {
        List<Json.Object.Member> m = new ArrayList<>();
        m.add(member);
        m.addAll(members);
        return m;
    }
}

Json.Object.Member member():
{
    Json.String name;
    Json.Value element;
}
{
    name = stringValue() <COLON> element = value()
    { return Json.Object.Member.of(name, element); }
}
